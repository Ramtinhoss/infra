// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX2/ctrL/KgTvfbgFlN2NmxatgT7YSW5v0CT1je2eAyTGAVea9bKRSJWkbC+M/e4H",
	"/CdRErWrXf+JXZynOCI1HM78ODOcGe0tTnlRcgZMSXx4i0siSAEKhPnfvKJ59u6N/pMyfIhLopY4wYwU",
	"gA/r0QQL+KuiAjJ8qEQFCZbpEgqiX1OrUk+VSlB2idfrBDOewSBJN7gbRUlYNuc3g0Sb8d3oKijKnKhh",
	"boMJu1Be68my5EyCkfKr2Uz/k3KmgCn9JynLnKZEUc6mf0rO9LOG3n8LWOBD/F/TRnVTOyqnb4Xgwq6R",
	"gUwFLTURfIiPSYY0iyAVXif41ezlw695VKklMOWoIrDz9OKvHn7xj1yhBa9YZlf8+eFXfM3ZIqepke8P",
	"j6HTUxBXILxc1x5zBlSvT85f88ou3WHz5BylXIBECy6QWgJyBwQneMFFQRQ+xJSp7w9wggtyQ4uqwIc/",
	"JbigzP79MvGYpkzBJRilvmVXfxBrNkiWUb0YyU8EL0EoaoHe5uMtu6KCswKYQldEUDLPozz1D6YViLZW",
	"LfIpzyCyjJ6MzFhkf/19FCAluRwiFOWnOfqfsVvIU7lYJ/g9lQqyU7ehHtskpyQiniP9GPGFkYa3NP3l",
	"E5zmFJiyRqpN4l2mT9+CgvB07NwolbKq8bIJjDWu1gkGlh1FAHZGC0DXS2ChItE1zXMENyUVLUVkRMEL",
	"RYvo1goouFh9ON7G1Ac/z7yjSEbU1lPl9PHBT+86km2iHARogqUiQsEusiESuZdGy0YqjYfeAqf6cZ9H",
	"YPrgfsaiYkwTSHBJKgkZvoiQbju+bYLws9FC8AJdL2m6RFS29pcKIHZvmw9Py6GGbrvGeCjcALQBVDws",
	"vYT0CfwQ4Ki9HTvStTqIMmRIbbCHL38+CE3iwU8xY/IRrgfPPTQGc6P1d9PuBu3dVOp1stHuaGDyymF8",
	"Qapc4cOXPyQxwCuOcnoFMTFLSDnL5CQqbC/dWV+2w8jRCv/oXEHX0uY81UB8fXLeF8PHqphbEdTzUO0r",
	"x/mO+kUHOBpB3FGhEdtexoLXoI4ej1uqCaO3KZNZj9Q3IFYJA1FCIw03DyRyxgNxFhIewaw+idVWpGul",
	"ndqZXfXW9wJHqcN90lZtVBEeFm9AEZpHogeSLiE71neaiDfWPlwLw85C5uojEc06sqAKChmJ+WuhECHI",
	"6l71Bxu43aa6mt1NammHL5GtPJx2zblrKcZr8bRes+/+KtkRXe38gGQrnOBMEGq8YMz5NdRfLwm7jJiR",
	"O+/XEdB7+QSyKjYEh9/YyK4T/MTjVmBX2R8gJLU3qjYhN+Cp6Ln1SaBsaxh3T+Hgkw6nQvldNOp+zy8j",
	"ZoVfImBKrNA1VUuksSkVKUpEWIZyyrSa2xgxD6N09Ajy1+OB6MIQj8fQdl0nstzzNTJ47oqpXiqxDLfl",
	"IPvQz93T3rZkHw6jbGwg9Z6B7XBr1g44/BAEheMu3v6NrdBtLSJoGiUlaLojKMKr5lDQsWPglZbVuYTs",
	"JB3Id1T6Mo5KECkwpe/lAdVFzkkAQWZ4cLfPM65IHg3jzMjGwO3HVwP5hUKzGiXqbiP6YrYTzV0OSxGo",
	"7O7nJbiBBTpo7bItSI3cMyBFxJ+U9DdYRRzKyTv0FZo7mtJvRywGlW+8h+yS+McS1BKa171BdS61Q3LO",
	"eQ6EmSjNJHp7MCUFNOY6zo1+Ptbgxyj0TLkh5zhKvLDCXXvJnkuIJMegcFFvJ6mlH3tOKv1mTLLZmH24",
	"t2tAVRXd7qLMFMub5d/FC/FoA4biDYhFHOODcRPOb7VJBvdtH31NpLkLqHFmKqinbJNmTqRCskpTkHJR",
	"5fbGYc7AJb0Ctjmy2iOX52KK7Tmr1t6bSGRc0srNP1656/jvC3z4eTOTNaTXFwlmVZ6TeQ62yLJOsBbT",
	"aUmu2c6sGwGbFNhDZiPLap7HHGfbIjm2qER2PuICcZavEDH6p/Mc0HwVsRaBqZJaCvtiuCuHDa5mr2A2",
	"Js6qzPZAnFWbfXVP9xVGxU0NM55LdPoLz0fIeYjoLhhbKmnZmNDSmXtt39ztYCnM1JiAmyjVucXPF72q",
	"oLEqZuIu9lKOun0Hyvc3cMOrzT/7y7itXt1fGnpf/de5hzrAbqnok6ud3v81eA9jnfH0K4gFzSPByZt6",
	"LIiYhpffx6iZFPzrIosCQCiU8qLQ0b/iCG4grbRp6xxlslDO+g3C954jqEBmoXLPzVke1O5j2W+TapGQ",
	"VoKq1amWuV3/yBA441+BHVVqaUwDEAHif73hs0v8S+kp2JWADWkzrVlqqVSpxXqUFZS1CJrOhiWQzEx3",
	"vQ3/fGEmvjhzdL0JsHGnpmP+2kbj5N0LG6d23tfbpWzBbY5LaSDjtwfH6OjkHU7wlU/o4Nnk5WSml+Ml",
	"MFJSfIi/n8wmM1PAUksjo+kSSG7ZuISIN/k/M4zSJaRfsaEkTBn+XYYP8a+g7DjudGUc2Ap+m5TDiS3Y",
	"1cFZ0FARO0I12ameZFU9ZTyz60RZNglckufITosw/dENxHge3XVQW/xxoZipqqwv+hmKfmdCLZt8hQSo",
	"SjDIgg3tJLC6m2LzXD0pPEVmO120f77QYaQi2jN+xkSP4otGIdNbm4teD2rmV1BmD8igd0gxH31GO+yn",
	"GpBuM2XqEuGaxTvpdZsSXQ1ktOLqXPqOenONPtvmvnoMHSe45DKWHjJZfiTr0IX4skFbtSdc3p9ujRU5",
	"5tnqXtXaKlus+41mB1YdnVjb6dZLwFzrDIksMHH56jnrXp/vVrlss9H1JYKwCtU756fBYAcJnUgQ/VWB",
	"z+opjhY097FPU5/7H5hcTtAXXEkQv5B5+qWazQ5+JGX5Syl49gV/N0H/b6jouApIujQpMf2fK5JXIFFR",
	"SYXmgM4/vUfAUp5BNtExvebArN+4Zf/fDb2P/T3ISF9JzbUT2Bf83cCSthUjXHKHhpQ7m8Md3Vyn4Hk3",
	"f9fHkjkbszFnY/aIfjKI5tpnqGF8gw01l2BEamCY2lXn6tE3p+ERehCb2HTfrNvXAZc96qDq/lpiW8v2",
	"7W3Y9+USCBFb+zwx0rK109u67Li2sMkh1rX2G83zBj49sLwxr9VwOQ1Kmbs54aYIGjEqA84xVNZXmufP",
	"wy+OPM+DMW5zlucrZLL0wx7wgfRxfzFvx6LvEvbKpu/luWp58EROfYZwEAUeAy5DOAIC7+3MvWGQRFNK",
	"2oOqSNlfIrUkCsklr/JMhz+17ihDBc1z6lpfhuMSoVpxSS8FvrkJsVfBtf2hiNUZ901cDnCV04K2uWp6",
	"f2az2a5NPA95ssI2iX3OlUXW3/Jw2UL7uPPl5446Yh/qyd/M2O7S1OJ6R/aOokO0eDn9LQFjLkAm6RwN",
	"sk/0cKdhZ0NMXcPFvPfokZK9zbUiJXNdTQmzFtD0PT6kIt03X9vm/vxtlS5gIUAuXbUhqvhPdkrrIMCN",
	"ApaZPkYljWv0/Z8jUfGpXveuyNjv3tYus2SVZThSznIjpphluyFDOTQ+9SuUChHTAdt0vIZfbHz/o3ad",
	"W74pcI/4/E9I1egcWsdwWck+Uvx4/4DUJ3MTGvX4HnbIvviN4LbJT3V6sJ9uqsAZzUe7fj4PCxq0yMcR",
	"ewrK5qLsxG6D/ASdxT9TRDfejAT5LNq0/jksTtBrkufmhrKkUocoS56hosoVLXNwHTf8CsS1oMo135yd",
	"vU9sGtcQrKR9HVBaCQFMhW20rvfbX4NKTvU4RwUQWQlobc3b0cnIM3nmZPcUfEDrU4duN5DeXGPWG32E",
	"8nJNBYNOov/x6T4fmjkuL+7FV0gHTc+pp/7M41sFpBhRZ7HTIneeMzfwmFl/05R8x2S/3dDjJWS7zSGd",
	"6pd+5hVi0/CjlOKnRhXTDHYsRiyRUXcth5mMvXp5Lh4bDK5scWdAeHk9FVA0HI0o5zC43lzBCfHwEKFZ",
	"tAVvVIB2cO88DEVotjNbx2ckTaFUu99qH0XZLTMwvW26IDcWZmzlBZFhGNgZNRDOwu7K3YKKoDFzfM6h",
	"1Rxsd3G3APmxTh5R6bK/JduOuOHQ6dceRNgPd3jbLZajTu9shLJdF/ZzKJze3SR/AmtmCBtpkJ8HNP5j",
	"1x/Qrk/trxRMb12T+3rDFdn0bYft2KOgZT/KP6576PfHWbJ1tu/Uj7iGg7i1sApcBr+t88z1N22+uxis",
	"KNUm0u5+qEt1mzJP/dcQj6LSXhn1Hcvgpu4286mPuf9aZbDqaz9B7nwGGKuw8kv5+2IhYaDM+qRqrO1P",
	"hXaqm9VieJoJhR1OiXlXXHkcViJ33zTIw+mUlHQCB/NJBlc4oHDb/aFGaaDW/lnI9kNzZ15frP8dAAD/",
	"/13dORkYUwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
