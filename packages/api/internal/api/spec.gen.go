// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rf8bAAD//7b07z2kTQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
