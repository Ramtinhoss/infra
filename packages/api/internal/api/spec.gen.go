// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"l6v/BgAA//+OQr20IlMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
