// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX2/jNhL/KgTvHu4Ar+1Nt0UboA/J7l4v6O42lz+9A7bBgZbGMbsSqZJUEiPwdz/w",
	"n0RJlC07iTcp7mmzEjUczvxmOJwZ+h4nPC84A6YkPrzHBREkBwXC/G9W0iw9eaf/pAwf4oKoBR5hRnLA",
	"h9XbERbwR0kFpPhQiRJGWCYLyIn+TC0LPVQqQdk1Xq1GmPEUekm6l9tRlISlM37XS7R+vx1dBXmREdXP",
	"bTBgG8orPVgWnEkwUn4znep/Es4UMKX/JEWR0YQoytnkd8mZflbT+6uAOT7Ef5nUqpvYt3LyXggu7Bwp",
	"yETQQhPBh/iYpEizCFLh1Qi/mb5++jmPSrUAphxVBHacnvzN00/+iSs05yVL7Yw/PP2MbzmbZzQx8v12",
	"Hzo9B3EDwst15TFnQPX29PItL+3ULTZPL1HCBUg05wKpBSBnIHiE51zkROFDTJn65gCPcE7uaF7m+PD7",
	"Ec4ps3+/HnlMU6bgGoxS37ObX4l1GyRNqZ6MZKeCFyAUtUBv8vGe3VDBWQ5MoRsiKJllUZ66hmkFor1V",
	"g3zCU4hMowcj8y6yvu46cpCSXPcRivJTm/5n7CbyVK5WI/wRci6WH4+7JO2b9poRZejj8XptvP7hIFTI",
	"wfexpXyC23Mnxo6wSKn4KSmlW+iclJnCh3OSSYiYMc+JNuMsW6JCfyQb/JK5ArsCRXPgpaqlNOM8A8I0",
	"N1ADZC3a3TCjCkVSojYaiFvkRz+847ub6zlJtVOaUxCIzw3bXoHIf9ZV8wj7tYXyev1tW1gXNAekOMro",
	"DcQUKyHhLJXjqHq9PqddbbZgFqxPQ+yTg35Lx1nGE6IgfXt62RXDpzKfWRFU41DlG4bZSvWhgziNYPwo",
	"126oOU1uca9xTo+HTVWHDZuUyawFdvTnlNDjFWtpuHEgkSgZo+wacRYSHsCsVESVG5GulXZuR7bVW8VB",
	"jlKL+1FTtVFFeFi8A0VoFvGWJFlAeqxjuIhz/kCl0ZkdhUyoJxFNW7KgCnIZiXEqoRAhyPJR9QdruN2k",
	"uorddWo5s596zxlZy9Op1xheQzNejefVnK0YwDxvyQ6Y9iKfsQCSLvEIp4JQvSZ8FZFrTf3tgrDriB95",
	"8HodAb2WM5BlDukz2pe+sl/XMmkiLuLHKYmo/kg/9ppft3MlGQWmhlmfHRulUpSV71yHgyryNHt+ehRx",
	"tkaYtwtgDSne0ixDcFdQ0XCzKVHwSispxlQexFbrmKpisIeFFY2j5iZR9oawxu6Fgm1kQyRyHw2WzXYx",
	"kB+N5oLn6HZBkwWiTXtKBBDLwPoYuHEuDk/fFRBDCQTICvTpsaN9xjM3DGA36a8gJLWHuiYh98JT0WOr",
	"zYmyjTh5JLw9ayiE8gvU/YFfR3Z6fo2AKbFEt1QtjF+XiuQFIixFGWVazU2MmIdROvoN8if0noDfEI8b",
	"qZ3XiSzzfA20zraYqqlGluGmHGQX+pl72lmW7MJhUNgTSL0T8rS4NXMHHH4MHOqws7//YiN0G5MImkRJ",
	"CZpsCYpwL+s7B2x5FkqK8lJCepr0pFxKSa4BFSASYIpcN7a4ecZJAEFmeHDb2wVXJIuerMybtWep7970",
	"pDhyzWqUqEtJlBLSrWhuYyx5oLKH20uwewQ6aKyyKUiN3AsgeWQ/KejPsIxsKKcn6AvUiRqlv454DCrf",
	"+QiyTeLfC1ALqD/3DtWFnC2SQXhqc80dmJIcancd50Y/H+rwYxQ6rtyQcxyNvLDCVXvJXkqI5OcgdwfR",
	"Vl5NP/aclPrLmGTTIetwX1eAKku6eYsyQyxvln8XL8SjDeiLNyAWcQw/H5sT9kafZHDf3KN1ZKg/VsPc",
	"VFDS2STNjEiFZJkkIOW8zGwSwNjANb3R8em6yGqHw4KLKTYHxY2115HIsKjYjT9eugzZL3N8+Hk9kxWk",
	"V1cjzMosI7MMbJ1nNcJaTOcFuWVbs24ErD3tkx53inKWxTbOpkdybFGJ7HjEBeIsWyJi9E9nGaDZMuIt",
	"AlcltRR2xXBbDmu2mp2C2Zg4yyLdAXFWbfbTHbevMCquy6jxc5DTX2gfIechottgbKik4WNCT2cyTV13",
	"t4WnMENjAq6jVLctfr7qFCaNVzEDt/GXclA+LFC+z4kZXjXRUZUeswW0q0c7N+2q/yobWAXYDRWdufLt",
	"4x+Dd3DWKU++gJjTLBKcvKveBRFT//S7ODWTPnibp1EACIUSnuc6+lccwR0kpXZtLVOus4O98H3kCCqQ",
	"WajcS2PLvdrdl/82qUgJSSmoWp5rmdv5jwyBC/4F2FGpFsY1ABEg/uEdn53iv0oPwa4KbUibYfVUC6UK",
	"LdajNKesQdA0VyyApGa4a6/4zysz8NWFo+tdgI07NR3z1yYapyevbJza+l4vl7I5N+6GKg1k/P7gGB2d",
	"nuARvvEJHTwdvx5P9XS8AEYKig/xN+PpeKpdM1ELI6PJAkhm2biGyG7yT/MaJQtIvmBDSZhOgJMUH+Kf",
	"QNn3uNUYcmCbCJqkHE5sRrAKzoKejpgJVWQnepBV9YTx1M4TZdnUVEiWITsswvQn9yLG8+DGh8rjDwvF",
	"TKFzddXNUHSbIyrZZEskQJWCQRosaCuBVQ0d68fqQaEVmeW00f75SoeRiuid8TMm+i2+qhUyubfVoVWv",
	"Zn4CZdaADHr7FPPJ15jClq4e6dZDJq40pVl8kF43KdGVJQcrrqpubak312u0aeybfeh4hAsuY+khU3dD",
	"sgpdiC/kNVV7yuXj6dZ4kWOeLh9VrY1C4qrb63Zg1dGKtZ1uvQTMsc6QSAMXly1fsu61fTcq2Oudri8R",
	"hHXhjp2fBy9bSGhFguiPEnxWT3E0p5mPfeqS+d9gfD1Gv+FSgviRzJLfyun04DtSFD8Wgqe/4b+P0b8M",
	"FR1XAUkWJiWm/3NDshIkykup0AzQ5dkHBCzhKaRjHdNrDsz89bbs/9vfJHm1332lXfR/2A7T1Z5B43QI",
	"Gqd73JmC+KmJ2prxNV7LHDsRqWpCplrUCva7DiwE7ZN4obrpbdUMwF2+pgWrx+uDbUzb9XBhKdcd2SPe",
	"7WVipOHdJvdVoW9lYZOBihwTf6ZZVsOnA5Z35rMKLudB8XC7ba8uO0a8Ss92FCrrC82yl7ETDbTn3qiy",
	"tuXZEpm8eP+e80T6eLwos+3St4k0Zd389VLV3GuSE5+U64WBB4FLyg3AwAc7cmccjKJZHL2FqkilXSK1",
	"IArJBS+zVEccle4oQznNMuq6sXqiD5M8akQfnazz+lbcTtHU9mUjViW513HZw1VGc9rkqm5Hm06n2/aV",
	"PaVphZ0Ju9iVRdaf0rhsbXuYffmxg0zsYzX4q3nbbfpIXLvGzmF0iBYvpz8lYArf7BqPsk0vbKtHZk1Q",
	"XcHF9tDuO1Qyi2mGSuaEmBBmPaBp/n1KRbqbXpvG/vB1lS5gLkAuXII/qvgzO6RhCHCngKWmdVBJszX6",
	"luSBqDir5n0oMnY7uDUrG2lpGY5UkNwbUz+yDYihHOo99QsUChHTlF03YYc3pb75Tm+dG27WuEd89jsk",
	"anDaquW4rGT3FD8+PiC1Za5Do36/gx+yH34luK09HjQvIjzfXIFzmns7f74MDxrc2ogj9hxUePWjfWdj",
	"jC7iVw/QnXcjQUKL1t12Dotj9JZkmTmhLKjUIcqCpygvM0WLDFyTC78BcSuocv0uFxcfRjZzagiW0n4O",
	"KCmFAKbCzlXXbu2PQQWn+j1HORBZCmgszfvR8UCbvKhuw3z9PaBx+6bdgKMXV7v1Wh+hvFwdv3eT6F4o",
	"2eW6pePy6lH2Cumg6Tn11F94fKuA5ANKG3ZY5Mxz4V7sM+9v+oAfmO23C9pfRrbdj9EqOOlnXiE2Dz9I",
	"KX5oVDH1y5bHiCUyqkbhMJOxU/vM1b7B4OoWDwaEl9dzAUXN0YB6DoPb9SWcEA9PEZpFu94GBWgHj85D",
	"X4Rmm6F1fEaSBAq1/al2L8puuIHJfd14uLYyY0sviPTDwI6ogHARNjRuF1QEvZDDcw6Nfly7iocFyPuy",
	"PKKSRXdJtgNwjdHpz55E2E9nvM2uxkHWOx2gbNf4/BIqpw93yWdg3QxhAx3yy4DG//36E/r1if2tjsm9",
	"6ytfrTkim1bpsAN6ELTsL1McV23ru+NstHG0b46PbA0HcW9hFbgI7su/cP1N6qsOvRWlykXa1fc1hm5S",
	"5rm/gLAXlXbKqCcshbvqSrBPfcz8BZHeqq+99du6eRersPJr+ct8LqGnzPqsaqzN2zlb1c0qMTzPhMIW",
	"VmK+FTceh6XI3DUCeTiZkIKO4WA2TuEGBxTu2z/PKA3Umj8G2Xxozsyrq9X/AgAA//99aLjlDlMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
