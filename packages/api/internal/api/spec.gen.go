// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
